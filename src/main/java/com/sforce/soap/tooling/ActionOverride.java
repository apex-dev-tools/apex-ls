package com.sforce.soap.tooling;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class ActionOverride implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public ActionOverride() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : formFactor of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean formFactor__is_set = false;

    private java.lang.String formFactor;

    public java.lang.String getFormFactor() {
      return formFactor;
    }

    public void setFormFactor(java.lang.String formFactor) {
      this.formFactor = formFactor;
      formFactor__is_set = true;
    }

    protected void setFormFactor(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("formFactor", "urn:tooling.soap.sforce.com","formFactor","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setFormFactor(__typeMapper.readString(__in, _lookupTypeInfo("formFactor", "urn:tooling.soap.sforce.com","formFactor","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldFormFactor(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("formFactor", "urn:tooling.soap.sforce.com","formFactor","http://www.w3.org/2001/XMLSchema","string",1,1,true), formFactor, formFactor__is_set);
    }

    /**
     * element : isAvailableInTouch of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean isAvailableInTouch__is_set = false;

    private boolean isAvailableInTouch;

    public boolean getIsAvailableInTouch() {
      return isAvailableInTouch;
    }

    public boolean isIsAvailableInTouch() {
      return isAvailableInTouch;
    }

    public void setIsAvailableInTouch(boolean isAvailableInTouch) {
      this.isAvailableInTouch = isAvailableInTouch;
      isAvailableInTouch__is_set = true;
    }

    protected void setIsAvailableInTouch(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("isAvailableInTouch", "urn:tooling.soap.sforce.com","isAvailableInTouch","http://www.w3.org/2001/XMLSchema","boolean",1,1,true))) {
        setIsAvailableInTouch(__typeMapper.readBoolean(__in, _lookupTypeInfo("isAvailableInTouch", "urn:tooling.soap.sforce.com","isAvailableInTouch","http://www.w3.org/2001/XMLSchema","boolean",1,1,true), boolean.class));
      }
    }

    private void writeFieldIsAvailableInTouch(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("isAvailableInTouch", "urn:tooling.soap.sforce.com","isAvailableInTouch","http://www.w3.org/2001/XMLSchema","boolean",1,1,true), isAvailableInTouch, isAvailableInTouch__is_set);
    }

    /**
     * element : name of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean name__is_set = false;

    private java.lang.String name;

    public java.lang.String getName() {
      return name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
      name__is_set = true;
    }

    protected void setName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setName(__typeMapper.readString(__in, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldName(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true), name, name__is_set);
    }

    /**
     * element : pageId of type {urn:tooling.soap.sforce.com}ID
     * java type: java.lang.String
     */
    private boolean pageId__is_set = false;

    private java.lang.String pageId;

    public java.lang.String getPageId() {
      return pageId;
    }

    public void setPageId(java.lang.String pageId) {
      this.pageId = pageId;
      pageId__is_set = true;
    }

    protected void setPageId(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("pageId", "urn:tooling.soap.sforce.com","pageId","urn:tooling.soap.sforce.com","ID",1,1,true))) {
        setPageId(__typeMapper.readString(__in, _lookupTypeInfo("pageId", "urn:tooling.soap.sforce.com","pageId","urn:tooling.soap.sforce.com","ID",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldPageId(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("pageId", "urn:tooling.soap.sforce.com","pageId","urn:tooling.soap.sforce.com","ID",1,1,true), pageId, pageId__is_set);
    }

    /**
     * element : url of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean url__is_set = false;

    private java.lang.String url;

    public java.lang.String getUrl() {
      return url;
    }

    public void setUrl(java.lang.String url) {
      this.url = url;
      url__is_set = true;
    }

    protected void setUrl(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("url", "urn:tooling.soap.sforce.com","url","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setUrl(__typeMapper.readString(__in, _lookupTypeInfo("url", "urn:tooling.soap.sforce.com","url","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldUrl(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("url", "urn:tooling.soap.sforce.com","url","http://www.w3.org/2001/XMLSchema","string",1,1,true), url, url__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[ActionOverride ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldFormFactor(__out, __typeMapper);
      writeFieldIsAvailableInTouch(__out, __typeMapper);
      writeFieldName(__out, __typeMapper);
      writeFieldPageId(__out, __typeMapper);
      writeFieldUrl(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setFormFactor(__in, __typeMapper);
      setIsAvailableInTouch(__in, __typeMapper);
      setName(__in, __typeMapper);
      setPageId(__in, __typeMapper);
      setUrl(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "formFactor", formFactor);
      toStringHelper(sb, "isAvailableInTouch", isAvailableInTouch);
      toStringHelper(sb, "name", name);
      toStringHelper(sb, "pageId", pageId);
      toStringHelper(sb, "url", url);
    }


}
