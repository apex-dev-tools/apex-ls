package com.sforce.soap.tooling;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class HeapAddress implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public HeapAddress() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : address of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean address__is_set = false;

    private java.lang.String address;

    public java.lang.String getAddress() {
      return address;
    }

    public void setAddress(java.lang.String address) {
      this.address = address;
      address__is_set = true;
    }

    protected void setAddress(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("address", "urn:tooling.soap.sforce.com","address","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setAddress(__typeMapper.readString(__in, _lookupTypeInfo("address", "urn:tooling.soap.sforce.com","address","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldAddress(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("address", "urn:tooling.soap.sforce.com","address","http://www.w3.org/2001/XMLSchema","string",1,1,true), address, address__is_set);
    }

    /**
     * element : isStatic of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean isStatic__is_set = false;

    private boolean isStatic;

    public boolean getIsStatic() {
      return isStatic;
    }

    public boolean isIsStatic() {
      return isStatic;
    }

    public void setIsStatic(boolean isStatic) {
      this.isStatic = isStatic;
      isStatic__is_set = true;
    }

    protected void setIsStatic(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("isStatic", "urn:tooling.soap.sforce.com","isStatic","http://www.w3.org/2001/XMLSchema","boolean",1,1,true))) {
        setIsStatic(__typeMapper.readBoolean(__in, _lookupTypeInfo("isStatic", "urn:tooling.soap.sforce.com","isStatic","http://www.w3.org/2001/XMLSchema","boolean",1,1,true), boolean.class));
      }
    }

    private void writeFieldIsStatic(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("isStatic", "urn:tooling.soap.sforce.com","isStatic","http://www.w3.org/2001/XMLSchema","boolean",1,1,true), isStatic, isStatic__is_set);
    }

    /**
     * element : size of type {http://www.w3.org/2001/XMLSchema}int
     * java type: int
     */
    private boolean size__is_set = false;

    private int size;

    public int getSize() {
      return size;
    }

    public void setSize(int size) {
      this.size = size;
      size__is_set = true;
    }

    protected void setSize(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("size", "urn:tooling.soap.sforce.com","size","http://www.w3.org/2001/XMLSchema","int",1,1,true))) {
        setSize((int)__typeMapper.readInt(__in, _lookupTypeInfo("size", "urn:tooling.soap.sforce.com","size","http://www.w3.org/2001/XMLSchema","int",1,1,true), int.class));
      }
    }

    private void writeFieldSize(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("size", "urn:tooling.soap.sforce.com","size","http://www.w3.org/2001/XMLSchema","int",1,1,true), size, size__is_set);
    }

    /**
     * element : symbols of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String[]
     */
    private boolean symbols__is_set = false;

    private java.lang.String[] symbols = new java.lang.String[0];

    public java.lang.String[] getSymbols() {
      return symbols;
    }

    public void setSymbols(java.lang.String[] symbols) {
      this.symbols = symbols;
      symbols__is_set = true;
    }

    protected void setSymbols(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("symbols", "urn:tooling.soap.sforce.com","symbols","http://www.w3.org/2001/XMLSchema","string",0,-1,true))) {
        setSymbols((java.lang.String[])__typeMapper.readObject(__in, _lookupTypeInfo("symbols", "urn:tooling.soap.sforce.com","symbols","http://www.w3.org/2001/XMLSchema","string",0,-1,true), java.lang.String[].class));
      }
    }

    private void writeFieldSymbols(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("symbols", "urn:tooling.soap.sforce.com","symbols","http://www.w3.org/2001/XMLSchema","string",0,-1,true), symbols, symbols__is_set);
    }

    /**
     * element : value of type {urn:tooling.soap.sforce.com}StateValue
     * java type: com.sforce.soap.tooling.StateValue
     */
    private boolean value__is_set = false;

    private com.sforce.soap.tooling.StateValue value;

    public com.sforce.soap.tooling.StateValue getValue() {
      return value;
    }

    public void setValue(com.sforce.soap.tooling.StateValue value) {
      this.value = value;
      value__is_set = true;
    }

    protected void setValue(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("value", "urn:tooling.soap.sforce.com","value","urn:tooling.soap.sforce.com","StateValue",1,1,true))) {
        setValue((com.sforce.soap.tooling.StateValue)__typeMapper.readObject(__in, _lookupTypeInfo("value", "urn:tooling.soap.sforce.com","value","urn:tooling.soap.sforce.com","StateValue",1,1,true), com.sforce.soap.tooling.StateValue.class));
      }
    }

    private void writeFieldValue(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("value", "urn:tooling.soap.sforce.com","value","urn:tooling.soap.sforce.com","StateValue",1,1,true), value, value__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[HeapAddress ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldAddress(__out, __typeMapper);
      writeFieldIsStatic(__out, __typeMapper);
      writeFieldSize(__out, __typeMapper);
      writeFieldSymbols(__out, __typeMapper);
      writeFieldValue(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setAddress(__in, __typeMapper);
      setIsStatic(__in, __typeMapper);
      setSize(__in, __typeMapper);
      setSymbols(__in, __typeMapper);
      setValue(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "address", address);
      toStringHelper(sb, "isStatic", isStatic);
      toStringHelper(sb, "size", size);
      toStringHelper(sb, "symbols", symbols);
      toStringHelper(sb, "value", value);
    }


}
