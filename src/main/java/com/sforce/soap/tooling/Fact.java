package com.sforce.soap.tooling;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class Fact implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public Fact() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : fact of type {urn:tooling.soap.sforce.com}MetadataVersionCheckFact
     * java type: com.sforce.soap.tooling.MetadataVersionCheckFact
     */
    private boolean fact__is_set = false;

    private com.sforce.soap.tooling.MetadataVersionCheckFact fact;

    public com.sforce.soap.tooling.MetadataVersionCheckFact getFact() {
      return fact;
    }

    public void setFact(com.sforce.soap.tooling.MetadataVersionCheckFact fact) {
      this.fact = fact;
      fact__is_set = true;
    }

    protected void setFact(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("fact", "urn:tooling.soap.sforce.com","fact","urn:tooling.soap.sforce.com","MetadataVersionCheckFact",1,1,true))) {
        setFact((com.sforce.soap.tooling.MetadataVersionCheckFact)__typeMapper.readObject(__in, _lookupTypeInfo("fact", "urn:tooling.soap.sforce.com","fact","urn:tooling.soap.sforce.com","MetadataVersionCheckFact",1,1,true), com.sforce.soap.tooling.MetadataVersionCheckFact.class));
      }
    }

    private void writeFieldFact(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("fact", "urn:tooling.soap.sforce.com","fact","urn:tooling.soap.sforce.com","MetadataVersionCheckFact",1,1,true), fact, fact__is_set);
    }

    /**
     * element : subject of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean subject__is_set = false;

    private java.lang.String subject;

    public java.lang.String getSubject() {
      return subject;
    }

    public void setSubject(java.lang.String subject) {
      this.subject = subject;
      subject__is_set = true;
    }

    protected void setSubject(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("subject", "urn:tooling.soap.sforce.com","subject","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setSubject(__typeMapper.readString(__in, _lookupTypeInfo("subject", "urn:tooling.soap.sforce.com","subject","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldSubject(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("subject", "urn:tooling.soap.sforce.com","subject","http://www.w3.org/2001/XMLSchema","string",1,1,true), subject, subject__is_set);
    }

    /**
     * element : token of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean token__is_set = false;

    private java.lang.String token;

    public java.lang.String getToken() {
      return token;
    }

    public void setToken(java.lang.String token) {
      this.token = token;
      token__is_set = true;
    }

    protected void setToken(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("token", "urn:tooling.soap.sforce.com","token","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setToken(__typeMapper.readString(__in, _lookupTypeInfo("token", "urn:tooling.soap.sforce.com","token","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldToken(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("token", "urn:tooling.soap.sforce.com","token","http://www.w3.org/2001/XMLSchema","string",1,1,true), token, token__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[Fact ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldFact(__out, __typeMapper);
      writeFieldSubject(__out, __typeMapper);
      writeFieldToken(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setFact(__in, __typeMapper);
      setSubject(__in, __typeMapper);
      setToken(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "fact", fact);
      toStringHelper(sb, "subject", subject);
      toStringHelper(sb, "token", token);
    }


}
