package com.sforce.soap.tooling;

import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public enum InvocableActionType {


  
	/**
	 * Enumeration  : apex
	 */
	apex("apex"),

  
	/**
	 * Enumeration  : chatterPost
	 */
	chatterPost("chatterPost"),

  
	/**
	 * Enumeration  : contentWorkspaceEnableFolders
	 */
	contentWorkspaceEnableFolders("contentWorkspaceEnableFolders"),

  
	/**
	 * Enumeration  : emailAlert
	 */
	emailAlert("emailAlert"),

  
	/**
	 * Enumeration  : emailSimple
	 */
	emailSimple("emailSimple"),

  
	/**
	 * Enumeration  : flow
	 */
	flow("flow"),

  
	/**
	 * Enumeration  : metricRefresh
	 */
	metricRefresh("metricRefresh"),

  
	/**
	 * Enumeration  : quickAction
	 */
	quickAction("quickAction"),

  
	/**
	 * Enumeration  : submit
	 */
	submit("submit"),

  
	/**
	 * Enumeration  : thanks
	 */
	thanks("thanks"),

  
	/**
	 * Enumeration  : thunderResponse
	 */
	thunderResponse("thunderResponse"),

  
	/**
	 * Enumeration  : createServiceReport
	 */
	createServiceReport("createServiceReport"),

  
	/**
	 * Enumeration  : deployOrchestration
	 */
	deployOrchestration("deployOrchestration"),

  
	/**
	 * Enumeration  : createResponseEventAction
	 */
	createResponseEventAction("createResponseEventAction"),

  
	/**
	 * Enumeration  : sfdcOutputAction
	 */
	sfdcOutputAction("sfdcOutputAction"),

  
	/**
	 * Enumeration  : generateWorkOrders
	 */
	generateWorkOrders("generateWorkOrders"),

  
	/**
	 * Enumeration  : deactivateSessionPermSet
	 */
	deactivateSessionPermSet("deactivateSessionPermSet"),

  
	/**
	 * Enumeration  : activateSessionPermSet
	 */
	activateSessionPermSet("activateSessionPermSet"),

  
	/**
	 * Enumeration  : aggregateValue
	 */
	aggregateValue("aggregateValue"),

  
	/**
	 * Enumeration  : orchestrationTimer
	 */
	orchestrationTimer("orchestrationTimer"),

  
	/**
	 * Enumeration  : orchestrationDebugLog
	 */
	orchestrationDebugLog("orchestrationDebugLog"),

  
	/**
	 * Enumeration  : choosePricebook
	 */
	choosePricebook("choosePricebook"),

  
	/**
	 * Enumeration  : component
	 */
	component("component"),

  
	/**
	 * Enumeration  : liveMessageNotification
	 */
	liveMessageNotification("liveMessageNotification"),

  
	/**
	 * Enumeration  : scaleCacheAsyncRefresh
	 */
	scaleCacheAsyncRefresh("scaleCacheAsyncRefresh"),

  
	/**
	 * Enumeration  : skillsBasedRouting
	 */
	skillsBasedRouting("skillsBasedRouting"),

  
	/**
	 * Enumeration  : createCustomField
	 */
	createCustomField("createCustomField"),

  
	/**
	 * Enumeration  : assignTrailheadBadge
	 */
	assignTrailheadBadge("assignTrailheadBadge"),

  
	/**
	 * Enumeration  : insightFeedback
	 */
	insightFeedback("insightFeedback"),

  
	/**
	 * Enumeration  : publishKnowledgeArticles
	 */
	publishKnowledgeArticles("publishKnowledgeArticles"),

  
	/**
	 * Enumeration  : routingAddressVerification
	 */
	routingAddressVerification("routingAddressVerification"),

  
	/**
	 * Enumeration  : assignTargetToCadence
	 */
	assignTargetToCadence("assignTargetToCadence"),

  
	/**
	 * Enumeration  : assignKnowledgeArticles
	 */
	assignKnowledgeArticles("assignKnowledgeArticles"),

;

	public static Map<String, String> valuesToEnums;

	static {
   		valuesToEnums = new HashMap<String, String>();
   		for (InvocableActionType e : EnumSet.allOf(InvocableActionType.class)) {
   			valuesToEnums.put(e.toString(), e.name());
   		}
   	}

   	private String value;

   	private InvocableActionType(String value) {
   		this.value = value;
   	}

   	@Override
   	public String toString() {
   		return value;
   	}
}
