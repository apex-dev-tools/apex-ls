package com.sforce.soap.tooling.metadata;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class QueueMembers implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public QueueMembers() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : publicGroups of type {urn:metadata.tooling.soap.sforce.com}PublicGroups
     * java type: com.sforce.soap.tooling.metadata.PublicGroups
     */
    private boolean publicGroups__is_set = false;

    private com.sforce.soap.tooling.metadata.PublicGroups publicGroups;

    public com.sforce.soap.tooling.metadata.PublicGroups getPublicGroups() {
      return publicGroups;
    }

    public void setPublicGroups(com.sforce.soap.tooling.metadata.PublicGroups publicGroups) {
      this.publicGroups = publicGroups;
      publicGroups__is_set = true;
    }

    protected void setPublicGroups(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("publicGroups", "urn:metadata.tooling.soap.sforce.com","publicGroups","urn:metadata.tooling.soap.sforce.com","PublicGroups",0,1,true))) {
        setPublicGroups((com.sforce.soap.tooling.metadata.PublicGroups)__typeMapper.readObject(__in, _lookupTypeInfo("publicGroups", "urn:metadata.tooling.soap.sforce.com","publicGroups","urn:metadata.tooling.soap.sforce.com","PublicGroups",0,1,true), com.sforce.soap.tooling.metadata.PublicGroups.class));
      }
    }

    private void writeFieldPublicGroups(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("publicGroups", "urn:metadata.tooling.soap.sforce.com","publicGroups","urn:metadata.tooling.soap.sforce.com","PublicGroups",0,1,true), publicGroups, publicGroups__is_set);
    }

    /**
     * element : roleAndSubordinates of type {urn:metadata.tooling.soap.sforce.com}RoleAndSubordinates
     * java type: com.sforce.soap.tooling.metadata.RoleAndSubordinates
     */
    private boolean roleAndSubordinates__is_set = false;

    private com.sforce.soap.tooling.metadata.RoleAndSubordinates roleAndSubordinates;

    public com.sforce.soap.tooling.metadata.RoleAndSubordinates getRoleAndSubordinates() {
      return roleAndSubordinates;
    }

    public void setRoleAndSubordinates(com.sforce.soap.tooling.metadata.RoleAndSubordinates roleAndSubordinates) {
      this.roleAndSubordinates = roleAndSubordinates;
      roleAndSubordinates__is_set = true;
    }

    protected void setRoleAndSubordinates(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("roleAndSubordinates", "urn:metadata.tooling.soap.sforce.com","roleAndSubordinates","urn:metadata.tooling.soap.sforce.com","RoleAndSubordinates",0,1,true))) {
        setRoleAndSubordinates((com.sforce.soap.tooling.metadata.RoleAndSubordinates)__typeMapper.readObject(__in, _lookupTypeInfo("roleAndSubordinates", "urn:metadata.tooling.soap.sforce.com","roleAndSubordinates","urn:metadata.tooling.soap.sforce.com","RoleAndSubordinates",0,1,true), com.sforce.soap.tooling.metadata.RoleAndSubordinates.class));
      }
    }

    private void writeFieldRoleAndSubordinates(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("roleAndSubordinates", "urn:metadata.tooling.soap.sforce.com","roleAndSubordinates","urn:metadata.tooling.soap.sforce.com","RoleAndSubordinates",0,1,true), roleAndSubordinates, roleAndSubordinates__is_set);
    }

    /**
     * element : roleAndSubordinatesInternal of type {urn:metadata.tooling.soap.sforce.com}RoleAndSubordinatesInternal
     * java type: com.sforce.soap.tooling.metadata.RoleAndSubordinatesInternal
     */
    private boolean roleAndSubordinatesInternal__is_set = false;

    private com.sforce.soap.tooling.metadata.RoleAndSubordinatesInternal roleAndSubordinatesInternal;

    public com.sforce.soap.tooling.metadata.RoleAndSubordinatesInternal getRoleAndSubordinatesInternal() {
      return roleAndSubordinatesInternal;
    }

    public void setRoleAndSubordinatesInternal(com.sforce.soap.tooling.metadata.RoleAndSubordinatesInternal roleAndSubordinatesInternal) {
      this.roleAndSubordinatesInternal = roleAndSubordinatesInternal;
      roleAndSubordinatesInternal__is_set = true;
    }

    protected void setRoleAndSubordinatesInternal(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("roleAndSubordinatesInternal", "urn:metadata.tooling.soap.sforce.com","roleAndSubordinatesInternal","urn:metadata.tooling.soap.sforce.com","RoleAndSubordinatesInternal",0,1,true))) {
        setRoleAndSubordinatesInternal((com.sforce.soap.tooling.metadata.RoleAndSubordinatesInternal)__typeMapper.readObject(__in, _lookupTypeInfo("roleAndSubordinatesInternal", "urn:metadata.tooling.soap.sforce.com","roleAndSubordinatesInternal","urn:metadata.tooling.soap.sforce.com","RoleAndSubordinatesInternal",0,1,true), com.sforce.soap.tooling.metadata.RoleAndSubordinatesInternal.class));
      }
    }

    private void writeFieldRoleAndSubordinatesInternal(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("roleAndSubordinatesInternal", "urn:metadata.tooling.soap.sforce.com","roleAndSubordinatesInternal","urn:metadata.tooling.soap.sforce.com","RoleAndSubordinatesInternal",0,1,true), roleAndSubordinatesInternal, roleAndSubordinatesInternal__is_set);
    }

    /**
     * element : roles of type {urn:metadata.tooling.soap.sforce.com}Roles
     * java type: com.sforce.soap.tooling.metadata.Roles
     */
    private boolean roles__is_set = false;

    private com.sforce.soap.tooling.metadata.Roles roles;

    public com.sforce.soap.tooling.metadata.Roles getRoles() {
      return roles;
    }

    public void setRoles(com.sforce.soap.tooling.metadata.Roles roles) {
      this.roles = roles;
      roles__is_set = true;
    }

    protected void setRoles(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("roles", "urn:metadata.tooling.soap.sforce.com","roles","urn:metadata.tooling.soap.sforce.com","Roles",0,1,true))) {
        setRoles((com.sforce.soap.tooling.metadata.Roles)__typeMapper.readObject(__in, _lookupTypeInfo("roles", "urn:metadata.tooling.soap.sforce.com","roles","urn:metadata.tooling.soap.sforce.com","Roles",0,1,true), com.sforce.soap.tooling.metadata.Roles.class));
      }
    }

    private void writeFieldRoles(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("roles", "urn:metadata.tooling.soap.sforce.com","roles","urn:metadata.tooling.soap.sforce.com","Roles",0,1,true), roles, roles__is_set);
    }

    /**
     * element : users of type {urn:metadata.tooling.soap.sforce.com}Users
     * java type: com.sforce.soap.tooling.metadata.Users
     */
    private boolean users__is_set = false;

    private com.sforce.soap.tooling.metadata.Users users;

    public com.sforce.soap.tooling.metadata.Users getUsers() {
      return users;
    }

    public void setUsers(com.sforce.soap.tooling.metadata.Users users) {
      this.users = users;
      users__is_set = true;
    }

    protected void setUsers(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("users", "urn:metadata.tooling.soap.sforce.com","users","urn:metadata.tooling.soap.sforce.com","Users",0,1,true))) {
        setUsers((com.sforce.soap.tooling.metadata.Users)__typeMapper.readObject(__in, _lookupTypeInfo("users", "urn:metadata.tooling.soap.sforce.com","users","urn:metadata.tooling.soap.sforce.com","Users",0,1,true), com.sforce.soap.tooling.metadata.Users.class));
      }
    }

    private void writeFieldUsers(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("users", "urn:metadata.tooling.soap.sforce.com","users","urn:metadata.tooling.soap.sforce.com","Users",0,1,true), users, users__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[QueueMembers ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldPublicGroups(__out, __typeMapper);
      writeFieldRoleAndSubordinates(__out, __typeMapper);
      writeFieldRoleAndSubordinatesInternal(__out, __typeMapper);
      writeFieldRoles(__out, __typeMapper);
      writeFieldUsers(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setPublicGroups(__in, __typeMapper);
      setRoleAndSubordinates(__in, __typeMapper);
      setRoleAndSubordinatesInternal(__in, __typeMapper);
      setRoles(__in, __typeMapper);
      setUsers(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "publicGroups", publicGroups);
      toStringHelper(sb, "roleAndSubordinates", roleAndSubordinates);
      toStringHelper(sb, "roleAndSubordinatesInternal", roleAndSubordinatesInternal);
      toStringHelper(sb, "roles", roles);
      toStringHelper(sb, "users", users);
    }


}
