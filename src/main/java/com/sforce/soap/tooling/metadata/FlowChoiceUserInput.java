package com.sforce.soap.tooling.metadata;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class FlowChoiceUserInput extends com.sforce.soap.tooling.metadata.FlowBaseElement {

    /**
     * Constructor
     */
    public FlowChoiceUserInput() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : isRequired of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean isRequired__is_set = false;

    private boolean isRequired;

    public boolean getIsRequired() {
      return isRequired;
    }

    public boolean isIsRequired() {
      return isRequired;
    }

    public void setIsRequired(boolean isRequired) {
      this.isRequired = isRequired;
      isRequired__is_set = true;
    }

    protected void setIsRequired(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("isRequired", "urn:metadata.tooling.soap.sforce.com","isRequired","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setIsRequired(__typeMapper.readBoolean(__in, _lookupTypeInfo("isRequired", "urn:metadata.tooling.soap.sforce.com","isRequired","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldIsRequired(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("isRequired", "urn:metadata.tooling.soap.sforce.com","isRequired","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), isRequired, isRequired__is_set);
    }

    /**
     * element : promptText of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean promptText__is_set = false;

    private java.lang.String promptText;

    public java.lang.String getPromptText() {
      return promptText;
    }

    public void setPromptText(java.lang.String promptText) {
      this.promptText = promptText;
      promptText__is_set = true;
    }

    protected void setPromptText(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("promptText", "urn:metadata.tooling.soap.sforce.com","promptText","http://www.w3.org/2001/XMLSchema","string",0,1,true))) {
        setPromptText(__typeMapper.readString(__in, _lookupTypeInfo("promptText", "urn:metadata.tooling.soap.sforce.com","promptText","http://www.w3.org/2001/XMLSchema","string",0,1,true), java.lang.String.class));
      }
    }

    private void writeFieldPromptText(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("promptText", "urn:metadata.tooling.soap.sforce.com","promptText","http://www.w3.org/2001/XMLSchema","string",0,1,true), promptText, promptText__is_set);
    }

    /**
     * element : validationRule of type {urn:metadata.tooling.soap.sforce.com}FlowInputValidationRule
     * java type: com.sforce.soap.tooling.metadata.FlowInputValidationRule
     */
    private boolean validationRule__is_set = false;

    private com.sforce.soap.tooling.metadata.FlowInputValidationRule validationRule;

    public com.sforce.soap.tooling.metadata.FlowInputValidationRule getValidationRule() {
      return validationRule;
    }

    public void setValidationRule(com.sforce.soap.tooling.metadata.FlowInputValidationRule validationRule) {
      this.validationRule = validationRule;
      validationRule__is_set = true;
    }

    protected void setValidationRule(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("validationRule", "urn:metadata.tooling.soap.sforce.com","validationRule","urn:metadata.tooling.soap.sforce.com","FlowInputValidationRule",0,1,true))) {
        setValidationRule((com.sforce.soap.tooling.metadata.FlowInputValidationRule)__typeMapper.readObject(__in, _lookupTypeInfo("validationRule", "urn:metadata.tooling.soap.sforce.com","validationRule","urn:metadata.tooling.soap.sforce.com","FlowInputValidationRule",0,1,true), com.sforce.soap.tooling.metadata.FlowInputValidationRule.class));
      }
    }

    private void writeFieldValidationRule(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("validationRule", "urn:metadata.tooling.soap.sforce.com","validationRule","urn:metadata.tooling.soap.sforce.com","FlowInputValidationRule",0,1,true), validationRule, validationRule__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "urn:metadata.tooling.soap.sforce.com", "FlowChoiceUserInput");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[FlowChoiceUserInput ");
      sb.append(super.toString());
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldIsRequired(__out, __typeMapper);
      writeFieldPromptText(__out, __typeMapper);
      writeFieldValidationRule(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setIsRequired(__in, __typeMapper);
      setPromptText(__in, __typeMapper);
      setValidationRule(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "isRequired", isRequired);
      toStringHelper(sb, "promptText", promptText);
      toStringHelper(sb, "validationRule", validationRule);
    }


}
