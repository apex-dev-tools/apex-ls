package com.sforce.soap.tooling.metadata;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class EmailToCaseSettings implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public EmailToCaseSettings() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : enableE2CSourceTracking of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableE2CSourceTracking__is_set = false;

    private boolean enableE2CSourceTracking;

    public boolean getEnableE2CSourceTracking() {
      return enableE2CSourceTracking;
    }

    public boolean isEnableE2CSourceTracking() {
      return enableE2CSourceTracking;
    }

    public void setEnableE2CSourceTracking(boolean enableE2CSourceTracking) {
      this.enableE2CSourceTracking = enableE2CSourceTracking;
      enableE2CSourceTracking__is_set = true;
    }

    protected void setEnableE2CSourceTracking(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableE2CSourceTracking", "urn:metadata.tooling.soap.sforce.com","enableE2CSourceTracking","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableE2CSourceTracking(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableE2CSourceTracking", "urn:metadata.tooling.soap.sforce.com","enableE2CSourceTracking","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableE2CSourceTracking(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableE2CSourceTracking", "urn:metadata.tooling.soap.sforce.com","enableE2CSourceTracking","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableE2CSourceTracking, enableE2CSourceTracking__is_set);
    }

    /**
     * element : enableEmailToCase of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableEmailToCase__is_set = false;

    private boolean enableEmailToCase;

    public boolean getEnableEmailToCase() {
      return enableEmailToCase;
    }

    public boolean isEnableEmailToCase() {
      return enableEmailToCase;
    }

    public void setEnableEmailToCase(boolean enableEmailToCase) {
      this.enableEmailToCase = enableEmailToCase;
      enableEmailToCase__is_set = true;
    }

    protected void setEnableEmailToCase(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableEmailToCase", "urn:metadata.tooling.soap.sforce.com","enableEmailToCase","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableEmailToCase(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableEmailToCase", "urn:metadata.tooling.soap.sforce.com","enableEmailToCase","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableEmailToCase(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableEmailToCase", "urn:metadata.tooling.soap.sforce.com","enableEmailToCase","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableEmailToCase, enableEmailToCase__is_set);
    }

    /**
     * element : enableHtmlEmail of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableHtmlEmail__is_set = false;

    private boolean enableHtmlEmail;

    public boolean getEnableHtmlEmail() {
      return enableHtmlEmail;
    }

    public boolean isEnableHtmlEmail() {
      return enableHtmlEmail;
    }

    public void setEnableHtmlEmail(boolean enableHtmlEmail) {
      this.enableHtmlEmail = enableHtmlEmail;
      enableHtmlEmail__is_set = true;
    }

    protected void setEnableHtmlEmail(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableHtmlEmail", "urn:metadata.tooling.soap.sforce.com","enableHtmlEmail","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableHtmlEmail(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableHtmlEmail", "urn:metadata.tooling.soap.sforce.com","enableHtmlEmail","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableHtmlEmail(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableHtmlEmail", "urn:metadata.tooling.soap.sforce.com","enableHtmlEmail","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableHtmlEmail, enableHtmlEmail__is_set);
    }

    /**
     * element : enableOnDemandEmailToCase of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableOnDemandEmailToCase__is_set = false;

    private boolean enableOnDemandEmailToCase;

    public boolean getEnableOnDemandEmailToCase() {
      return enableOnDemandEmailToCase;
    }

    public boolean isEnableOnDemandEmailToCase() {
      return enableOnDemandEmailToCase;
    }

    public void setEnableOnDemandEmailToCase(boolean enableOnDemandEmailToCase) {
      this.enableOnDemandEmailToCase = enableOnDemandEmailToCase;
      enableOnDemandEmailToCase__is_set = true;
    }

    protected void setEnableOnDemandEmailToCase(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableOnDemandEmailToCase", "urn:metadata.tooling.soap.sforce.com","enableOnDemandEmailToCase","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableOnDemandEmailToCase(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableOnDemandEmailToCase", "urn:metadata.tooling.soap.sforce.com","enableOnDemandEmailToCase","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableOnDemandEmailToCase(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableOnDemandEmailToCase", "urn:metadata.tooling.soap.sforce.com","enableOnDemandEmailToCase","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableOnDemandEmailToCase, enableOnDemandEmailToCase__is_set);
    }

    /**
     * element : enableThreadIDInBody of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableThreadIDInBody__is_set = false;

    private boolean enableThreadIDInBody;

    public boolean getEnableThreadIDInBody() {
      return enableThreadIDInBody;
    }

    public boolean isEnableThreadIDInBody() {
      return enableThreadIDInBody;
    }

    public void setEnableThreadIDInBody(boolean enableThreadIDInBody) {
      this.enableThreadIDInBody = enableThreadIDInBody;
      enableThreadIDInBody__is_set = true;
    }

    protected void setEnableThreadIDInBody(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableThreadIDInBody", "urn:metadata.tooling.soap.sforce.com","enableThreadIDInBody","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableThreadIDInBody(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableThreadIDInBody", "urn:metadata.tooling.soap.sforce.com","enableThreadIDInBody","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableThreadIDInBody(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableThreadIDInBody", "urn:metadata.tooling.soap.sforce.com","enableThreadIDInBody","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableThreadIDInBody, enableThreadIDInBody__is_set);
    }

    /**
     * element : enableThreadIDInSubject of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableThreadIDInSubject__is_set = false;

    private boolean enableThreadIDInSubject;

    public boolean getEnableThreadIDInSubject() {
      return enableThreadIDInSubject;
    }

    public boolean isEnableThreadIDInSubject() {
      return enableThreadIDInSubject;
    }

    public void setEnableThreadIDInSubject(boolean enableThreadIDInSubject) {
      this.enableThreadIDInSubject = enableThreadIDInSubject;
      enableThreadIDInSubject__is_set = true;
    }

    protected void setEnableThreadIDInSubject(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableThreadIDInSubject", "urn:metadata.tooling.soap.sforce.com","enableThreadIDInSubject","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableThreadIDInSubject(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableThreadIDInSubject", "urn:metadata.tooling.soap.sforce.com","enableThreadIDInSubject","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableThreadIDInSubject(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableThreadIDInSubject", "urn:metadata.tooling.soap.sforce.com","enableThreadIDInSubject","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableThreadIDInSubject, enableThreadIDInSubject__is_set);
    }

    /**
     * element : notifyOwnerOnNewCaseEmail of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean notifyOwnerOnNewCaseEmail__is_set = false;

    private boolean notifyOwnerOnNewCaseEmail;

    public boolean getNotifyOwnerOnNewCaseEmail() {
      return notifyOwnerOnNewCaseEmail;
    }

    public boolean isNotifyOwnerOnNewCaseEmail() {
      return notifyOwnerOnNewCaseEmail;
    }

    public void setNotifyOwnerOnNewCaseEmail(boolean notifyOwnerOnNewCaseEmail) {
      this.notifyOwnerOnNewCaseEmail = notifyOwnerOnNewCaseEmail;
      notifyOwnerOnNewCaseEmail__is_set = true;
    }

    protected void setNotifyOwnerOnNewCaseEmail(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("notifyOwnerOnNewCaseEmail", "urn:metadata.tooling.soap.sforce.com","notifyOwnerOnNewCaseEmail","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setNotifyOwnerOnNewCaseEmail(__typeMapper.readBoolean(__in, _lookupTypeInfo("notifyOwnerOnNewCaseEmail", "urn:metadata.tooling.soap.sforce.com","notifyOwnerOnNewCaseEmail","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldNotifyOwnerOnNewCaseEmail(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("notifyOwnerOnNewCaseEmail", "urn:metadata.tooling.soap.sforce.com","notifyOwnerOnNewCaseEmail","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), notifyOwnerOnNewCaseEmail, notifyOwnerOnNewCaseEmail__is_set);
    }

    /**
     * element : overEmailLimitAction of type {urn:tooling.soap.sforce.com}EmailToCaseOnFailureActionType
     * java type: com.sforce.soap.tooling.EmailToCaseOnFailureActionType
     */
    private boolean overEmailLimitAction__is_set = false;

    private com.sforce.soap.tooling.EmailToCaseOnFailureActionType overEmailLimitAction;

    public com.sforce.soap.tooling.EmailToCaseOnFailureActionType getOverEmailLimitAction() {
      return overEmailLimitAction;
    }

    public void setOverEmailLimitAction(com.sforce.soap.tooling.EmailToCaseOnFailureActionType overEmailLimitAction) {
      this.overEmailLimitAction = overEmailLimitAction;
      overEmailLimitAction__is_set = true;
    }

    protected void setOverEmailLimitAction(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("overEmailLimitAction", "urn:metadata.tooling.soap.sforce.com","overEmailLimitAction","urn:tooling.soap.sforce.com","EmailToCaseOnFailureActionType",0,1,true))) {
        setOverEmailLimitAction((com.sforce.soap.tooling.EmailToCaseOnFailureActionType)__typeMapper.readObject(__in, _lookupTypeInfo("overEmailLimitAction", "urn:metadata.tooling.soap.sforce.com","overEmailLimitAction","urn:tooling.soap.sforce.com","EmailToCaseOnFailureActionType",0,1,true), com.sforce.soap.tooling.EmailToCaseOnFailureActionType.class));
      }
    }

    private void writeFieldOverEmailLimitAction(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("overEmailLimitAction", "urn:metadata.tooling.soap.sforce.com","overEmailLimitAction","urn:tooling.soap.sforce.com","EmailToCaseOnFailureActionType",0,1,true), overEmailLimitAction, overEmailLimitAction__is_set);
    }

    /**
     * element : preQuoteSignature of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean preQuoteSignature__is_set = false;

    private boolean preQuoteSignature;

    public boolean getPreQuoteSignature() {
      return preQuoteSignature;
    }

    public boolean isPreQuoteSignature() {
      return preQuoteSignature;
    }

    public void setPreQuoteSignature(boolean preQuoteSignature) {
      this.preQuoteSignature = preQuoteSignature;
      preQuoteSignature__is_set = true;
    }

    protected void setPreQuoteSignature(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("preQuoteSignature", "urn:metadata.tooling.soap.sforce.com","preQuoteSignature","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setPreQuoteSignature(__typeMapper.readBoolean(__in, _lookupTypeInfo("preQuoteSignature", "urn:metadata.tooling.soap.sforce.com","preQuoteSignature","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldPreQuoteSignature(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("preQuoteSignature", "urn:metadata.tooling.soap.sforce.com","preQuoteSignature","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), preQuoteSignature, preQuoteSignature__is_set);
    }

    /**
     * element : routingAddresses of type {urn:metadata.tooling.soap.sforce.com}EmailToCaseRoutingAddress
     * java type: com.sforce.soap.tooling.metadata.EmailToCaseRoutingAddress[]
     */
    private boolean routingAddresses__is_set = false;

    private com.sforce.soap.tooling.metadata.EmailToCaseRoutingAddress[] routingAddresses = new com.sforce.soap.tooling.metadata.EmailToCaseRoutingAddress[0];

    public com.sforce.soap.tooling.metadata.EmailToCaseRoutingAddress[] getRoutingAddresses() {
      return routingAddresses;
    }

    public void setRoutingAddresses(com.sforce.soap.tooling.metadata.EmailToCaseRoutingAddress[] routingAddresses) {
      this.routingAddresses = routingAddresses;
      routingAddresses__is_set = true;
    }

    protected void setRoutingAddresses(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("routingAddresses", "urn:metadata.tooling.soap.sforce.com","routingAddresses","urn:metadata.tooling.soap.sforce.com","EmailToCaseRoutingAddress",0,-1,true))) {
        setRoutingAddresses((com.sforce.soap.tooling.metadata.EmailToCaseRoutingAddress[])__typeMapper.readObject(__in, _lookupTypeInfo("routingAddresses", "urn:metadata.tooling.soap.sforce.com","routingAddresses","urn:metadata.tooling.soap.sforce.com","EmailToCaseRoutingAddress",0,-1,true), com.sforce.soap.tooling.metadata.EmailToCaseRoutingAddress[].class));
      }
    }

    private void writeFieldRoutingAddresses(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("routingAddresses", "urn:metadata.tooling.soap.sforce.com","routingAddresses","urn:metadata.tooling.soap.sforce.com","EmailToCaseRoutingAddress",0,-1,true), routingAddresses, routingAddresses__is_set);
    }

    /**
     * element : unauthorizedSenderAction of type {urn:tooling.soap.sforce.com}EmailToCaseOnFailureActionType
     * java type: com.sforce.soap.tooling.EmailToCaseOnFailureActionType
     */
    private boolean unauthorizedSenderAction__is_set = false;

    private com.sforce.soap.tooling.EmailToCaseOnFailureActionType unauthorizedSenderAction;

    public com.sforce.soap.tooling.EmailToCaseOnFailureActionType getUnauthorizedSenderAction() {
      return unauthorizedSenderAction;
    }

    public void setUnauthorizedSenderAction(com.sforce.soap.tooling.EmailToCaseOnFailureActionType unauthorizedSenderAction) {
      this.unauthorizedSenderAction = unauthorizedSenderAction;
      unauthorizedSenderAction__is_set = true;
    }

    protected void setUnauthorizedSenderAction(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("unauthorizedSenderAction", "urn:metadata.tooling.soap.sforce.com","unauthorizedSenderAction","urn:tooling.soap.sforce.com","EmailToCaseOnFailureActionType",0,1,true))) {
        setUnauthorizedSenderAction((com.sforce.soap.tooling.EmailToCaseOnFailureActionType)__typeMapper.readObject(__in, _lookupTypeInfo("unauthorizedSenderAction", "urn:metadata.tooling.soap.sforce.com","unauthorizedSenderAction","urn:tooling.soap.sforce.com","EmailToCaseOnFailureActionType",0,1,true), com.sforce.soap.tooling.EmailToCaseOnFailureActionType.class));
      }
    }

    private void writeFieldUnauthorizedSenderAction(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("unauthorizedSenderAction", "urn:metadata.tooling.soap.sforce.com","unauthorizedSenderAction","urn:tooling.soap.sforce.com","EmailToCaseOnFailureActionType",0,1,true), unauthorizedSenderAction, unauthorizedSenderAction__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[EmailToCaseSettings ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldEnableE2CSourceTracking(__out, __typeMapper);
      writeFieldEnableEmailToCase(__out, __typeMapper);
      writeFieldEnableHtmlEmail(__out, __typeMapper);
      writeFieldEnableOnDemandEmailToCase(__out, __typeMapper);
      writeFieldEnableThreadIDInBody(__out, __typeMapper);
      writeFieldEnableThreadIDInSubject(__out, __typeMapper);
      writeFieldNotifyOwnerOnNewCaseEmail(__out, __typeMapper);
      writeFieldOverEmailLimitAction(__out, __typeMapper);
      writeFieldPreQuoteSignature(__out, __typeMapper);
      writeFieldRoutingAddresses(__out, __typeMapper);
      writeFieldUnauthorizedSenderAction(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setEnableE2CSourceTracking(__in, __typeMapper);
      setEnableEmailToCase(__in, __typeMapper);
      setEnableHtmlEmail(__in, __typeMapper);
      setEnableOnDemandEmailToCase(__in, __typeMapper);
      setEnableThreadIDInBody(__in, __typeMapper);
      setEnableThreadIDInSubject(__in, __typeMapper);
      setNotifyOwnerOnNewCaseEmail(__in, __typeMapper);
      setOverEmailLimitAction(__in, __typeMapper);
      setPreQuoteSignature(__in, __typeMapper);
      setRoutingAddresses(__in, __typeMapper);
      setUnauthorizedSenderAction(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "enableE2CSourceTracking", enableE2CSourceTracking);
      toStringHelper(sb, "enableEmailToCase", enableEmailToCase);
      toStringHelper(sb, "enableHtmlEmail", enableHtmlEmail);
      toStringHelper(sb, "enableOnDemandEmailToCase", enableOnDemandEmailToCase);
      toStringHelper(sb, "enableThreadIDInBody", enableThreadIDInBody);
      toStringHelper(sb, "enableThreadIDInSubject", enableThreadIDInSubject);
      toStringHelper(sb, "notifyOwnerOnNewCaseEmail", notifyOwnerOnNewCaseEmail);
      toStringHelper(sb, "overEmailLimitAction", overEmailLimitAction);
      toStringHelper(sb, "preQuoteSignature", preQuoteSignature);
      toStringHelper(sb, "routingAddresses", routingAddresses);
      toStringHelper(sb, "unauthorizedSenderAction", unauthorizedSenderAction);
    }


}
