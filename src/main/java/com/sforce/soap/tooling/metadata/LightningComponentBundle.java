package com.sforce.soap.tooling.metadata;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class LightningComponentBundle extends com.sforce.soap.tooling.metadata.Metadata {

    /**
     * Constructor
     */
    public LightningComponentBundle() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : apiVersion of type {http://www.w3.org/2001/XMLSchema}double
     * java type: double
     */
    private boolean apiVersion__is_set = false;

    private double apiVersion;

    public double getApiVersion() {
      return apiVersion;
    }

    public void setApiVersion(double apiVersion) {
      this.apiVersion = apiVersion;
      apiVersion__is_set = true;
    }

    protected void setApiVersion(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("apiVersion", "urn:metadata.tooling.soap.sforce.com","apiVersion","http://www.w3.org/2001/XMLSchema","double",0,1,true))) {
        setApiVersion((double)__typeMapper.readDouble(__in, _lookupTypeInfo("apiVersion", "urn:metadata.tooling.soap.sforce.com","apiVersion","http://www.w3.org/2001/XMLSchema","double",0,1,true), double.class));
      }
    }

    private void writeFieldApiVersion(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("apiVersion", "urn:metadata.tooling.soap.sforce.com","apiVersion","http://www.w3.org/2001/XMLSchema","double",0,1,true), apiVersion, apiVersion__is_set);
    }

    /**
     * element : description of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean description__is_set = false;

    private java.lang.String description;

    public java.lang.String getDescription() {
      return description;
    }

    public void setDescription(java.lang.String description) {
      this.description = description;
      description__is_set = true;
    }

    protected void setDescription(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("description", "urn:metadata.tooling.soap.sforce.com","description","http://www.w3.org/2001/XMLSchema","string",0,1,true))) {
        setDescription(__typeMapper.readString(__in, _lookupTypeInfo("description", "urn:metadata.tooling.soap.sforce.com","description","http://www.w3.org/2001/XMLSchema","string",0,1,true), java.lang.String.class));
      }
    }

    private void writeFieldDescription(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("description", "urn:metadata.tooling.soap.sforce.com","description","http://www.w3.org/2001/XMLSchema","string",0,1,true), description, description__is_set);
    }

    /**
     * element : isExposed of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean isExposed__is_set = false;

    private boolean isExposed;

    public boolean getIsExposed() {
      return isExposed;
    }

    public boolean isIsExposed() {
      return isExposed;
    }

    public void setIsExposed(boolean isExposed) {
      this.isExposed = isExposed;
      isExposed__is_set = true;
    }

    protected void setIsExposed(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("isExposed", "urn:metadata.tooling.soap.sforce.com","isExposed","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setIsExposed(__typeMapper.readBoolean(__in, _lookupTypeInfo("isExposed", "urn:metadata.tooling.soap.sforce.com","isExposed","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldIsExposed(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("isExposed", "urn:metadata.tooling.soap.sforce.com","isExposed","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), isExposed, isExposed__is_set);
    }

    /**
     * element : lwcResources of type {urn:metadata.tooling.soap.sforce.com}LwcResources
     * java type: com.sforce.soap.tooling.metadata.LwcResources
     */
    private boolean lwcResources__is_set = false;

    private com.sforce.soap.tooling.metadata.LwcResources lwcResources;

    public com.sforce.soap.tooling.metadata.LwcResources getLwcResources() {
      return lwcResources;
    }

    public void setLwcResources(com.sforce.soap.tooling.metadata.LwcResources lwcResources) {
      this.lwcResources = lwcResources;
      lwcResources__is_set = true;
    }

    protected void setLwcResources(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("lwcResources", "urn:metadata.tooling.soap.sforce.com","lwcResources","urn:metadata.tooling.soap.sforce.com","LwcResources",0,1,true))) {
        setLwcResources((com.sforce.soap.tooling.metadata.LwcResources)__typeMapper.readObject(__in, _lookupTypeInfo("lwcResources", "urn:metadata.tooling.soap.sforce.com","lwcResources","urn:metadata.tooling.soap.sforce.com","LwcResources",0,1,true), com.sforce.soap.tooling.metadata.LwcResources.class));
      }
    }

    private void writeFieldLwcResources(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("lwcResources", "urn:metadata.tooling.soap.sforce.com","lwcResources","urn:metadata.tooling.soap.sforce.com","LwcResources",0,1,true), lwcResources, lwcResources__is_set);
    }

    /**
     * element : masterLabel of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean masterLabel__is_set = false;

    private java.lang.String masterLabel;

    public java.lang.String getMasterLabel() {
      return masterLabel;
    }

    public void setMasterLabel(java.lang.String masterLabel) {
      this.masterLabel = masterLabel;
      masterLabel__is_set = true;
    }

    protected void setMasterLabel(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("masterLabel", "urn:metadata.tooling.soap.sforce.com","masterLabel","http://www.w3.org/2001/XMLSchema","string",0,1,true))) {
        setMasterLabel(__typeMapper.readString(__in, _lookupTypeInfo("masterLabel", "urn:metadata.tooling.soap.sforce.com","masterLabel","http://www.w3.org/2001/XMLSchema","string",0,1,true), java.lang.String.class));
      }
    }

    private void writeFieldMasterLabel(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("masterLabel", "urn:metadata.tooling.soap.sforce.com","masterLabel","http://www.w3.org/2001/XMLSchema","string",0,1,true), masterLabel, masterLabel__is_set);
    }

    /**
     * element : tagConfigs of type {http://www.w3.org/2001/XMLSchema}base64Binary
     * java type: byte[]
     */
    private boolean tagConfigs__is_set = false;

    private byte[] tagConfigs;

    public byte[] getTagConfigs() {
      return tagConfigs;
    }

    public void setTagConfigs(byte[] tagConfigs) {
      this.tagConfigs = tagConfigs;
      tagConfigs__is_set = true;
    }

    protected void setTagConfigs(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("tagConfigs", "urn:metadata.tooling.soap.sforce.com","tagConfigs","http://www.w3.org/2001/XMLSchema","base64Binary",0,1,true))) {
        setTagConfigs((byte[])__typeMapper.readObject(__in, _lookupTypeInfo("tagConfigs", "urn:metadata.tooling.soap.sforce.com","tagConfigs","http://www.w3.org/2001/XMLSchema","base64Binary",0,1,true), byte[].class));
      }
    }

    private void writeFieldTagConfigs(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("tagConfigs", "urn:metadata.tooling.soap.sforce.com","tagConfigs","http://www.w3.org/2001/XMLSchema","base64Binary",0,1,true), tagConfigs, tagConfigs__is_set);
    }

    /**
     * element : tags of type {urn:metadata.tooling.soap.sforce.com}Tags
     * java type: com.sforce.soap.tooling.metadata.Tags
     */
    private boolean tags__is_set = false;

    private com.sforce.soap.tooling.metadata.Tags tags;

    public com.sforce.soap.tooling.metadata.Tags getTags() {
      return tags;
    }

    public void setTags(com.sforce.soap.tooling.metadata.Tags tags) {
      this.tags = tags;
      tags__is_set = true;
    }

    protected void setTags(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("tags", "urn:metadata.tooling.soap.sforce.com","tags","urn:metadata.tooling.soap.sforce.com","Tags",0,1,true))) {
        setTags((com.sforce.soap.tooling.metadata.Tags)__typeMapper.readObject(__in, _lookupTypeInfo("tags", "urn:metadata.tooling.soap.sforce.com","tags","urn:metadata.tooling.soap.sforce.com","Tags",0,1,true), com.sforce.soap.tooling.metadata.Tags.class));
      }
    }

    private void writeFieldTags(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("tags", "urn:metadata.tooling.soap.sforce.com","tags","urn:metadata.tooling.soap.sforce.com","Tags",0,1,true), tags, tags__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "urn:metadata.tooling.soap.sforce.com", "LightningComponentBundle");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[LightningComponentBundle ");
      sb.append(super.toString());
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldApiVersion(__out, __typeMapper);
      writeFieldDescription(__out, __typeMapper);
      writeFieldIsExposed(__out, __typeMapper);
      writeFieldLwcResources(__out, __typeMapper);
      writeFieldMasterLabel(__out, __typeMapper);
      writeFieldTagConfigs(__out, __typeMapper);
      writeFieldTags(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setApiVersion(__in, __typeMapper);
      setDescription(__in, __typeMapper);
      setIsExposed(__in, __typeMapper);
      setLwcResources(__in, __typeMapper);
      setMasterLabel(__in, __typeMapper);
      setTagConfigs(__in, __typeMapper);
      setTags(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "apiVersion", apiVersion);
      toStringHelper(sb, "description", description);
      toStringHelper(sb, "isExposed", isExposed);
      toStringHelper(sb, "lwcResources", lwcResources);
      toStringHelper(sb, "masterLabel", masterLabel);
      toStringHelper(sb, "tagConfigs", tagConfigs);
      toStringHelper(sb, "tags", tags);
    }


}
