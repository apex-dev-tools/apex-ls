package com.sforce.soap.tooling.metadata;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class FlowRule extends com.sforce.soap.tooling.metadata.FlowElement {

    /**
     * Constructor
     */
    public FlowRule() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : conditionLogic of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean conditionLogic__is_set = false;

    private java.lang.String conditionLogic;

    public java.lang.String getConditionLogic() {
      return conditionLogic;
    }

    public void setConditionLogic(java.lang.String conditionLogic) {
      this.conditionLogic = conditionLogic;
      conditionLogic__is_set = true;
    }

    protected void setConditionLogic(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("conditionLogic", "urn:metadata.tooling.soap.sforce.com","conditionLogic","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setConditionLogic(__typeMapper.readString(__in, _lookupTypeInfo("conditionLogic", "urn:metadata.tooling.soap.sforce.com","conditionLogic","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldConditionLogic(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("conditionLogic", "urn:metadata.tooling.soap.sforce.com","conditionLogic","http://www.w3.org/2001/XMLSchema","string",1,1,true), conditionLogic, conditionLogic__is_set);
    }

    /**
     * element : conditions of type {urn:metadata.tooling.soap.sforce.com}FlowCondition
     * java type: com.sforce.soap.tooling.metadata.FlowCondition[]
     */
    private boolean conditions__is_set = false;

    private com.sforce.soap.tooling.metadata.FlowCondition[] conditions = new com.sforce.soap.tooling.metadata.FlowCondition[0];

    public com.sforce.soap.tooling.metadata.FlowCondition[] getConditions() {
      return conditions;
    }

    public void setConditions(com.sforce.soap.tooling.metadata.FlowCondition[] conditions) {
      this.conditions = conditions;
      conditions__is_set = true;
    }

    protected void setConditions(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("conditions", "urn:metadata.tooling.soap.sforce.com","conditions","urn:metadata.tooling.soap.sforce.com","FlowCondition",0,-1,true))) {
        setConditions((com.sforce.soap.tooling.metadata.FlowCondition[])__typeMapper.readObject(__in, _lookupTypeInfo("conditions", "urn:metadata.tooling.soap.sforce.com","conditions","urn:metadata.tooling.soap.sforce.com","FlowCondition",0,-1,true), com.sforce.soap.tooling.metadata.FlowCondition[].class));
      }
    }

    private void writeFieldConditions(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("conditions", "urn:metadata.tooling.soap.sforce.com","conditions","urn:metadata.tooling.soap.sforce.com","FlowCondition",0,-1,true), conditions, conditions__is_set);
    }

    /**
     * element : connector of type {urn:metadata.tooling.soap.sforce.com}FlowConnector
     * java type: com.sforce.soap.tooling.metadata.FlowConnector
     */
    private boolean connector__is_set = false;

    private com.sforce.soap.tooling.metadata.FlowConnector connector;

    public com.sforce.soap.tooling.metadata.FlowConnector getConnector() {
      return connector;
    }

    public void setConnector(com.sforce.soap.tooling.metadata.FlowConnector connector) {
      this.connector = connector;
      connector__is_set = true;
    }

    protected void setConnector(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("connector", "urn:metadata.tooling.soap.sforce.com","connector","urn:metadata.tooling.soap.sforce.com","FlowConnector",0,1,true))) {
        setConnector((com.sforce.soap.tooling.metadata.FlowConnector)__typeMapper.readObject(__in, _lookupTypeInfo("connector", "urn:metadata.tooling.soap.sforce.com","connector","urn:metadata.tooling.soap.sforce.com","FlowConnector",0,1,true), com.sforce.soap.tooling.metadata.FlowConnector.class));
      }
    }

    private void writeFieldConnector(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("connector", "urn:metadata.tooling.soap.sforce.com","connector","urn:metadata.tooling.soap.sforce.com","FlowConnector",0,1,true), connector, connector__is_set);
    }

    /**
     * element : label of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean label__is_set = false;

    private java.lang.String label;

    public java.lang.String getLabel() {
      return label;
    }

    public void setLabel(java.lang.String label) {
      this.label = label;
      label__is_set = true;
    }

    protected void setLabel(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("label", "urn:metadata.tooling.soap.sforce.com","label","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setLabel(__typeMapper.readString(__in, _lookupTypeInfo("label", "urn:metadata.tooling.soap.sforce.com","label","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldLabel(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("label", "urn:metadata.tooling.soap.sforce.com","label","http://www.w3.org/2001/XMLSchema","string",1,1,true), label, label__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "urn:metadata.tooling.soap.sforce.com", "FlowRule");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[FlowRule ");
      sb.append(super.toString());
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldConditionLogic(__out, __typeMapper);
      writeFieldConditions(__out, __typeMapper);
      writeFieldConnector(__out, __typeMapper);
      writeFieldLabel(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setConditionLogic(__in, __typeMapper);
      setConditions(__in, __typeMapper);
      setConnector(__in, __typeMapper);
      setLabel(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "conditionLogic", conditionLogic);
      toStringHelper(sb, "conditions", conditions);
      toStringHelper(sb, "connector", connector);
      toStringHelper(sb, "label", label);
    }


}
