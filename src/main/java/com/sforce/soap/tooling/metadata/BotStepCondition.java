package com.sforce.soap.tooling.metadata;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class BotStepCondition implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public BotStepCondition() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : leftOperandName of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean leftOperandName__is_set = false;

    private java.lang.String leftOperandName;

    public java.lang.String getLeftOperandName() {
      return leftOperandName;
    }

    public void setLeftOperandName(java.lang.String leftOperandName) {
      this.leftOperandName = leftOperandName;
      leftOperandName__is_set = true;
    }

    protected void setLeftOperandName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("leftOperandName", "urn:metadata.tooling.soap.sforce.com","leftOperandName","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setLeftOperandName(__typeMapper.readString(__in, _lookupTypeInfo("leftOperandName", "urn:metadata.tooling.soap.sforce.com","leftOperandName","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldLeftOperandName(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("leftOperandName", "urn:metadata.tooling.soap.sforce.com","leftOperandName","http://www.w3.org/2001/XMLSchema","string",1,1,true), leftOperandName, leftOperandName__is_set);
    }

    /**
     * element : leftOperandType of type {urn:tooling.soap.sforce.com}ConversationVariableType
     * java type: com.sforce.soap.tooling.ConversationVariableType
     */
    private boolean leftOperandType__is_set = false;

    private com.sforce.soap.tooling.ConversationVariableType leftOperandType;

    public com.sforce.soap.tooling.ConversationVariableType getLeftOperandType() {
      return leftOperandType;
    }

    public void setLeftOperandType(com.sforce.soap.tooling.ConversationVariableType leftOperandType) {
      this.leftOperandType = leftOperandType;
      leftOperandType__is_set = true;
    }

    protected void setLeftOperandType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("leftOperandType", "urn:metadata.tooling.soap.sforce.com","leftOperandType","urn:tooling.soap.sforce.com","ConversationVariableType",1,1,true))) {
        setLeftOperandType((com.sforce.soap.tooling.ConversationVariableType)__typeMapper.readObject(__in, _lookupTypeInfo("leftOperandType", "urn:metadata.tooling.soap.sforce.com","leftOperandType","urn:tooling.soap.sforce.com","ConversationVariableType",1,1,true), com.sforce.soap.tooling.ConversationVariableType.class));
      }
    }

    private void writeFieldLeftOperandType(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("leftOperandType", "urn:metadata.tooling.soap.sforce.com","leftOperandType","urn:tooling.soap.sforce.com","ConversationVariableType",1,1,true), leftOperandType, leftOperandType__is_set);
    }

    /**
     * element : operatorType of type {urn:tooling.soap.sforce.com}BotStepConditionOperatorType
     * java type: com.sforce.soap.tooling.BotStepConditionOperatorType
     */
    private boolean operatorType__is_set = false;

    private com.sforce.soap.tooling.BotStepConditionOperatorType operatorType;

    public com.sforce.soap.tooling.BotStepConditionOperatorType getOperatorType() {
      return operatorType;
    }

    public void setOperatorType(com.sforce.soap.tooling.BotStepConditionOperatorType operatorType) {
      this.operatorType = operatorType;
      operatorType__is_set = true;
    }

    protected void setOperatorType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("operatorType", "urn:metadata.tooling.soap.sforce.com","operatorType","urn:tooling.soap.sforce.com","BotStepConditionOperatorType",1,1,true))) {
        setOperatorType((com.sforce.soap.tooling.BotStepConditionOperatorType)__typeMapper.readObject(__in, _lookupTypeInfo("operatorType", "urn:metadata.tooling.soap.sforce.com","operatorType","urn:tooling.soap.sforce.com","BotStepConditionOperatorType",1,1,true), com.sforce.soap.tooling.BotStepConditionOperatorType.class));
      }
    }

    private void writeFieldOperatorType(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("operatorType", "urn:metadata.tooling.soap.sforce.com","operatorType","urn:tooling.soap.sforce.com","BotStepConditionOperatorType",1,1,true), operatorType, operatorType__is_set);
    }

    /**
     * element : rightOperandValue of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean rightOperandValue__is_set = false;

    private java.lang.String rightOperandValue;

    public java.lang.String getRightOperandValue() {
      return rightOperandValue;
    }

    public void setRightOperandValue(java.lang.String rightOperandValue) {
      this.rightOperandValue = rightOperandValue;
      rightOperandValue__is_set = true;
    }

    protected void setRightOperandValue(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("rightOperandValue", "urn:metadata.tooling.soap.sforce.com","rightOperandValue","http://www.w3.org/2001/XMLSchema","string",0,1,true))) {
        setRightOperandValue(__typeMapper.readString(__in, _lookupTypeInfo("rightOperandValue", "urn:metadata.tooling.soap.sforce.com","rightOperandValue","http://www.w3.org/2001/XMLSchema","string",0,1,true), java.lang.String.class));
      }
    }

    private void writeFieldRightOperandValue(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("rightOperandValue", "urn:metadata.tooling.soap.sforce.com","rightOperandValue","http://www.w3.org/2001/XMLSchema","string",0,1,true), rightOperandValue, rightOperandValue__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[BotStepCondition ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldLeftOperandName(__out, __typeMapper);
      writeFieldLeftOperandType(__out, __typeMapper);
      writeFieldOperatorType(__out, __typeMapper);
      writeFieldRightOperandValue(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setLeftOperandName(__in, __typeMapper);
      setLeftOperandType(__in, __typeMapper);
      setOperatorType(__in, __typeMapper);
      setRightOperandValue(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "leftOperandName", leftOperandName);
      toStringHelper(sb, "leftOperandType", leftOperandType);
      toStringHelper(sb, "operatorType", operatorType);
      toStringHelper(sb, "rightOperandValue", rightOperandValue);
    }


}
