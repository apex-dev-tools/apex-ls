package com.sforce.soap.tooling.metadata;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class OrderSettings extends com.sforce.soap.tooling.metadata.MetadataForSettings {

    /**
     * Constructor
     */
    public OrderSettings() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : enableNegativeQuantity of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableNegativeQuantity__is_set = false;

    private boolean enableNegativeQuantity;

    public boolean getEnableNegativeQuantity() {
      return enableNegativeQuantity;
    }

    public boolean isEnableNegativeQuantity() {
      return enableNegativeQuantity;
    }

    public void setEnableNegativeQuantity(boolean enableNegativeQuantity) {
      this.enableNegativeQuantity = enableNegativeQuantity;
      enableNegativeQuantity__is_set = true;
    }

    protected void setEnableNegativeQuantity(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableNegativeQuantity", "urn:metadata.tooling.soap.sforce.com","enableNegativeQuantity","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableNegativeQuantity(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableNegativeQuantity", "urn:metadata.tooling.soap.sforce.com","enableNegativeQuantity","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableNegativeQuantity(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableNegativeQuantity", "urn:metadata.tooling.soap.sforce.com","enableNegativeQuantity","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableNegativeQuantity, enableNegativeQuantity__is_set);
    }

    /**
     * element : enableOrders of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableOrders__is_set = false;

    private boolean enableOrders;

    public boolean getEnableOrders() {
      return enableOrders;
    }

    public boolean isEnableOrders() {
      return enableOrders;
    }

    public void setEnableOrders(boolean enableOrders) {
      this.enableOrders = enableOrders;
      enableOrders__is_set = true;
    }

    protected void setEnableOrders(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableOrders", "urn:metadata.tooling.soap.sforce.com","enableOrders","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableOrders(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableOrders", "urn:metadata.tooling.soap.sforce.com","enableOrders","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableOrders(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableOrders", "urn:metadata.tooling.soap.sforce.com","enableOrders","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableOrders, enableOrders__is_set);
    }

    /**
     * element : enableReductionOrders of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableReductionOrders__is_set = false;

    private boolean enableReductionOrders;

    public boolean getEnableReductionOrders() {
      return enableReductionOrders;
    }

    public boolean isEnableReductionOrders() {
      return enableReductionOrders;
    }

    public void setEnableReductionOrders(boolean enableReductionOrders) {
      this.enableReductionOrders = enableReductionOrders;
      enableReductionOrders__is_set = true;
    }

    protected void setEnableReductionOrders(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableReductionOrders", "urn:metadata.tooling.soap.sforce.com","enableReductionOrders","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableReductionOrders(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableReductionOrders", "urn:metadata.tooling.soap.sforce.com","enableReductionOrders","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableReductionOrders(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableReductionOrders", "urn:metadata.tooling.soap.sforce.com","enableReductionOrders","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableReductionOrders, enableReductionOrders__is_set);
    }

    /**
     * element : enableZeroQuantity of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean enableZeroQuantity__is_set = false;

    private boolean enableZeroQuantity;

    public boolean getEnableZeroQuantity() {
      return enableZeroQuantity;
    }

    public boolean isEnableZeroQuantity() {
      return enableZeroQuantity;
    }

    public void setEnableZeroQuantity(boolean enableZeroQuantity) {
      this.enableZeroQuantity = enableZeroQuantity;
      enableZeroQuantity__is_set = true;
    }

    protected void setEnableZeroQuantity(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("enableZeroQuantity", "urn:metadata.tooling.soap.sforce.com","enableZeroQuantity","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setEnableZeroQuantity(__typeMapper.readBoolean(__in, _lookupTypeInfo("enableZeroQuantity", "urn:metadata.tooling.soap.sforce.com","enableZeroQuantity","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldEnableZeroQuantity(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("enableZeroQuantity", "urn:metadata.tooling.soap.sforce.com","enableZeroQuantity","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), enableZeroQuantity, enableZeroQuantity__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "urn:metadata.tooling.soap.sforce.com", "OrderSettings");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[OrderSettings ");
      sb.append(super.toString());
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldEnableNegativeQuantity(__out, __typeMapper);
      writeFieldEnableOrders(__out, __typeMapper);
      writeFieldEnableReductionOrders(__out, __typeMapper);
      writeFieldEnableZeroQuantity(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setEnableNegativeQuantity(__in, __typeMapper);
      setEnableOrders(__in, __typeMapper);
      setEnableReductionOrders(__in, __typeMapper);
      setEnableZeroQuantity(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "enableNegativeQuantity", enableNegativeQuantity);
      toStringHelper(sb, "enableOrders", enableOrders);
      toStringHelper(sb, "enableReductionOrders", enableReductionOrders);
      toStringHelper(sb, "enableZeroQuantity", enableZeroQuantity);
    }


}
