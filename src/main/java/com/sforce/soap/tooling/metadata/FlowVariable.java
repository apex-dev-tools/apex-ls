package com.sforce.soap.tooling.metadata;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class FlowVariable extends com.sforce.soap.tooling.metadata.FlowElement {

    /**
     * Constructor
     */
    public FlowVariable() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : dataType of type {urn:tooling.soap.sforce.com}FlowDataType
     * java type: com.sforce.soap.tooling.FlowDataType
     */
    private boolean dataType__is_set = false;

    private com.sforce.soap.tooling.FlowDataType dataType;

    public com.sforce.soap.tooling.FlowDataType getDataType() {
      return dataType;
    }

    public void setDataType(com.sforce.soap.tooling.FlowDataType dataType) {
      this.dataType = dataType;
      dataType__is_set = true;
    }

    protected void setDataType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("dataType", "urn:metadata.tooling.soap.sforce.com","dataType","urn:tooling.soap.sforce.com","FlowDataType",1,1,true))) {
        setDataType((com.sforce.soap.tooling.FlowDataType)__typeMapper.readObject(__in, _lookupTypeInfo("dataType", "urn:metadata.tooling.soap.sforce.com","dataType","urn:tooling.soap.sforce.com","FlowDataType",1,1,true), com.sforce.soap.tooling.FlowDataType.class));
      }
    }

    private void writeFieldDataType(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("dataType", "urn:metadata.tooling.soap.sforce.com","dataType","urn:tooling.soap.sforce.com","FlowDataType",1,1,true), dataType, dataType__is_set);
    }

    /**
     * element : isCollection of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean isCollection__is_set = false;

    private boolean isCollection;

    public boolean getIsCollection() {
      return isCollection;
    }

    public boolean isIsCollection() {
      return isCollection;
    }

    public void setIsCollection(boolean isCollection) {
      this.isCollection = isCollection;
      isCollection__is_set = true;
    }

    protected void setIsCollection(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("isCollection", "urn:metadata.tooling.soap.sforce.com","isCollection","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setIsCollection(__typeMapper.readBoolean(__in, _lookupTypeInfo("isCollection", "urn:metadata.tooling.soap.sforce.com","isCollection","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldIsCollection(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("isCollection", "urn:metadata.tooling.soap.sforce.com","isCollection","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), isCollection, isCollection__is_set);
    }

    /**
     * element : isInput of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean isInput__is_set = false;

    private boolean isInput;

    public boolean getIsInput() {
      return isInput;
    }

    public boolean isIsInput() {
      return isInput;
    }

    public void setIsInput(boolean isInput) {
      this.isInput = isInput;
      isInput__is_set = true;
    }

    protected void setIsInput(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("isInput", "urn:metadata.tooling.soap.sforce.com","isInput","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setIsInput(__typeMapper.readBoolean(__in, _lookupTypeInfo("isInput", "urn:metadata.tooling.soap.sforce.com","isInput","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldIsInput(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("isInput", "urn:metadata.tooling.soap.sforce.com","isInput","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), isInput, isInput__is_set);
    }

    /**
     * element : isOutput of type {http://www.w3.org/2001/XMLSchema}boolean
     * java type: boolean
     */
    private boolean isOutput__is_set = false;

    private boolean isOutput;

    public boolean getIsOutput() {
      return isOutput;
    }

    public boolean isIsOutput() {
      return isOutput;
    }

    public void setIsOutput(boolean isOutput) {
      this.isOutput = isOutput;
      isOutput__is_set = true;
    }

    protected void setIsOutput(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("isOutput", "urn:metadata.tooling.soap.sforce.com","isOutput","http://www.w3.org/2001/XMLSchema","boolean",0,1,true))) {
        setIsOutput(__typeMapper.readBoolean(__in, _lookupTypeInfo("isOutput", "urn:metadata.tooling.soap.sforce.com","isOutput","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), boolean.class));
      }
    }

    private void writeFieldIsOutput(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("isOutput", "urn:metadata.tooling.soap.sforce.com","isOutput","http://www.w3.org/2001/XMLSchema","boolean",0,1,true), isOutput, isOutput__is_set);
    }

    /**
     * element : objectType of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean objectType__is_set = false;

    private java.lang.String objectType;

    public java.lang.String getObjectType() {
      return objectType;
    }

    public void setObjectType(java.lang.String objectType) {
      this.objectType = objectType;
      objectType__is_set = true;
    }

    protected void setObjectType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("objectType", "urn:metadata.tooling.soap.sforce.com","objectType","http://www.w3.org/2001/XMLSchema","string",0,1,true))) {
        setObjectType(__typeMapper.readString(__in, _lookupTypeInfo("objectType", "urn:metadata.tooling.soap.sforce.com","objectType","http://www.w3.org/2001/XMLSchema","string",0,1,true), java.lang.String.class));
      }
    }

    private void writeFieldObjectType(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("objectType", "urn:metadata.tooling.soap.sforce.com","objectType","http://www.w3.org/2001/XMLSchema","string",0,1,true), objectType, objectType__is_set);
    }

    /**
     * element : scale of type {http://www.w3.org/2001/XMLSchema}int
     * java type: int
     */
    private boolean scale__is_set = false;

    private int scale;

    public int getScale() {
      return scale;
    }

    public void setScale(int scale) {
      this.scale = scale;
      scale__is_set = true;
    }

    protected void setScale(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("scale", "urn:metadata.tooling.soap.sforce.com","scale","http://www.w3.org/2001/XMLSchema","int",0,1,true))) {
        setScale((int)__typeMapper.readInt(__in, _lookupTypeInfo("scale", "urn:metadata.tooling.soap.sforce.com","scale","http://www.w3.org/2001/XMLSchema","int",0,1,true), int.class));
      }
    }

    private void writeFieldScale(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("scale", "urn:metadata.tooling.soap.sforce.com","scale","http://www.w3.org/2001/XMLSchema","int",0,1,true), scale, scale__is_set);
    }

    /**
     * element : value of type {urn:metadata.tooling.soap.sforce.com}FlowElementReferenceOrValue
     * java type: com.sforce.soap.tooling.metadata.FlowElementReferenceOrValue
     */
    private boolean value__is_set = false;

    private com.sforce.soap.tooling.metadata.FlowElementReferenceOrValue value;

    public com.sforce.soap.tooling.metadata.FlowElementReferenceOrValue getValue() {
      return value;
    }

    public void setValue(com.sforce.soap.tooling.metadata.FlowElementReferenceOrValue value) {
      this.value = value;
      value__is_set = true;
    }

    protected void setValue(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("value", "urn:metadata.tooling.soap.sforce.com","value","urn:metadata.tooling.soap.sforce.com","FlowElementReferenceOrValue",0,1,true))) {
        setValue((com.sforce.soap.tooling.metadata.FlowElementReferenceOrValue)__typeMapper.readObject(__in, _lookupTypeInfo("value", "urn:metadata.tooling.soap.sforce.com","value","urn:metadata.tooling.soap.sforce.com","FlowElementReferenceOrValue",0,1,true), com.sforce.soap.tooling.metadata.FlowElementReferenceOrValue.class));
      }
    }

    private void writeFieldValue(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("value", "urn:metadata.tooling.soap.sforce.com","value","urn:metadata.tooling.soap.sforce.com","FlowElementReferenceOrValue",0,1,true), value, value__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      __typeMapper.writeXsiType(__out, "urn:metadata.tooling.soap.sforce.com", "FlowVariable");
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       super.writeFields(__out, __typeMapper);
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        super.loadFields(__in, __typeMapper);
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[FlowVariable ");
      sb.append(super.toString());
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldDataType(__out, __typeMapper);
      writeFieldIsCollection(__out, __typeMapper);
      writeFieldIsInput(__out, __typeMapper);
      writeFieldIsOutput(__out, __typeMapper);
      writeFieldObjectType(__out, __typeMapper);
      writeFieldScale(__out, __typeMapper);
      writeFieldValue(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setDataType(__in, __typeMapper);
      setIsCollection(__in, __typeMapper);
      setIsInput(__in, __typeMapper);
      setIsOutput(__in, __typeMapper);
      setObjectType(__in, __typeMapper);
      setScale(__in, __typeMapper);
      setValue(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "dataType", dataType);
      toStringHelper(sb, "isCollection", isCollection);
      toStringHelper(sb, "isInput", isInput);
      toStringHelper(sb, "isOutput", isOutput);
      toStringHelper(sb, "objectType", objectType);
      toStringHelper(sb, "scale", scale);
      toStringHelper(sb, "value", value);
    }


}
