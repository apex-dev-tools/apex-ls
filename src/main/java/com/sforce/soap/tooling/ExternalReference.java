package com.sforce.soap.tooling;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class ExternalReference implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public ExternalReference() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : methods of type {urn:tooling.soap.sforce.com}ExternalMethod
     * java type: com.sforce.soap.tooling.ExternalMethod[]
     */
    private boolean methods__is_set = false;

    private com.sforce.soap.tooling.ExternalMethod[] methods = new com.sforce.soap.tooling.ExternalMethod[0];

    public com.sforce.soap.tooling.ExternalMethod[] getMethods() {
      return methods;
    }

    public void setMethods(com.sforce.soap.tooling.ExternalMethod[] methods) {
      this.methods = methods;
      methods__is_set = true;
    }

    protected void setMethods(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("methods", "urn:tooling.soap.sforce.com","methods","urn:tooling.soap.sforce.com","ExternalMethod",0,-1,true))) {
        setMethods((com.sforce.soap.tooling.ExternalMethod[])__typeMapper.readObject(__in, _lookupTypeInfo("methods", "urn:tooling.soap.sforce.com","methods","urn:tooling.soap.sforce.com","ExternalMethod",0,-1,true), com.sforce.soap.tooling.ExternalMethod[].class));
      }
    }

    private void writeFieldMethods(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("methods", "urn:tooling.soap.sforce.com","methods","urn:tooling.soap.sforce.com","ExternalMethod",0,-1,true), methods, methods__is_set);
    }

    /**
     * element : name of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean name__is_set = false;

    private java.lang.String name;

    public java.lang.String getName() {
      return name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
      name__is_set = true;
    }

    protected void setName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setName(__typeMapper.readString(__in, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldName(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true), name, name__is_set);
    }

    /**
     * element : namespace of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean namespace__is_set = false;

    private java.lang.String namespace;

    public java.lang.String getNamespace() {
      return namespace;
    }

    public void setNamespace(java.lang.String namespace) {
      this.namespace = namespace;
      namespace__is_set = true;
    }

    protected void setNamespace(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("namespace", "urn:tooling.soap.sforce.com","namespace","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setNamespace(__typeMapper.readString(__in, _lookupTypeInfo("namespace", "urn:tooling.soap.sforce.com","namespace","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldNamespace(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("namespace", "urn:tooling.soap.sforce.com","namespace","http://www.w3.org/2001/XMLSchema","string",1,1,true), namespace, namespace__is_set);
    }

    /**
     * element : references of type {urn:tooling.soap.sforce.com}Position
     * java type: com.sforce.soap.tooling.Position[]
     */
    private boolean references__is_set = false;

    private com.sforce.soap.tooling.Position[] references = new com.sforce.soap.tooling.Position[0];

    public com.sforce.soap.tooling.Position[] getReferences() {
      return references;
    }

    public void setReferences(com.sforce.soap.tooling.Position[] references) {
      this.references = references;
      references__is_set = true;
    }

    protected void setReferences(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("references", "urn:tooling.soap.sforce.com","references","urn:tooling.soap.sforce.com","Position",0,-1,true))) {
        setReferences((com.sforce.soap.tooling.Position[])__typeMapper.readObject(__in, _lookupTypeInfo("references", "urn:tooling.soap.sforce.com","references","urn:tooling.soap.sforce.com","Position",0,-1,true), com.sforce.soap.tooling.Position[].class));
      }
    }

    private void writeFieldReferences(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("references", "urn:tooling.soap.sforce.com","references","urn:tooling.soap.sforce.com","Position",0,-1,true), references, references__is_set);
    }

    /**
     * element : variables of type {urn:tooling.soap.sforce.com}ExternalSymbol
     * java type: com.sforce.soap.tooling.ExternalSymbol[]
     */
    private boolean variables__is_set = false;

    private com.sforce.soap.tooling.ExternalSymbol[] variables = new com.sforce.soap.tooling.ExternalSymbol[0];

    public com.sforce.soap.tooling.ExternalSymbol[] getVariables() {
      return variables;
    }

    public void setVariables(com.sforce.soap.tooling.ExternalSymbol[] variables) {
      this.variables = variables;
      variables__is_set = true;
    }

    protected void setVariables(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("variables", "urn:tooling.soap.sforce.com","variables","urn:tooling.soap.sforce.com","ExternalSymbol",0,-1,true))) {
        setVariables((com.sforce.soap.tooling.ExternalSymbol[])__typeMapper.readObject(__in, _lookupTypeInfo("variables", "urn:tooling.soap.sforce.com","variables","urn:tooling.soap.sforce.com","ExternalSymbol",0,-1,true), com.sforce.soap.tooling.ExternalSymbol[].class));
      }
    }

    private void writeFieldVariables(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("variables", "urn:tooling.soap.sforce.com","variables","urn:tooling.soap.sforce.com","ExternalSymbol",0,-1,true), variables, variables__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[ExternalReference ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldMethods(__out, __typeMapper);
      writeFieldName(__out, __typeMapper);
      writeFieldNamespace(__out, __typeMapper);
      writeFieldReferences(__out, __typeMapper);
      writeFieldVariables(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setMethods(__in, __typeMapper);
      setName(__in, __typeMapper);
      setNamespace(__in, __typeMapper);
      setReferences(__in, __typeMapper);
      setVariables(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "methods", methods);
      toStringHelper(sb, "name", name);
      toStringHelper(sb, "namespace", namespace);
      toStringHelper(sb, "references", references);
      toStringHelper(sb, "variables", variables);
    }


}
