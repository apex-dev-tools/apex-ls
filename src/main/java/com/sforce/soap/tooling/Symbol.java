package com.sforce.soap.tooling;

/**
 * This is a generated class for the SObject Enterprise API.
 * Do not edit this file, as your changes will be lost.
 */
public class Symbol implements com.sforce.ws.bind.XMLizable {

    /**
     * Constructor
     */
    public Symbol() {}

    /* Cache the typeInfo instead of declaring static fields throughout*/
    private transient java.util.Map<String, com.sforce.ws.bind.TypeInfo> typeInfoCache = new java.util.HashMap<String, com.sforce.ws.bind.TypeInfo>();
    private com.sforce.ws.bind.TypeInfo _lookupTypeInfo(String fieldName, String namespace, String name, String typeNS, String type, int minOcc, int maxOcc, boolean elementForm) {
      com.sforce.ws.bind.TypeInfo typeInfo = typeInfoCache.get(fieldName);
      if (typeInfo == null) {
        typeInfo = new com.sforce.ws.bind.TypeInfo(namespace, name, typeNS, type, minOcc, maxOcc, elementForm);
        typeInfoCache.put(fieldName, typeInfo);
      }
      return typeInfo;
    }

    /**
     * element : annotations of type {urn:tooling.soap.sforce.com}Annotation
     * java type: com.sforce.soap.tooling.Annotation[]
     */
    private boolean annotations__is_set = false;

    private com.sforce.soap.tooling.Annotation[] annotations = new com.sforce.soap.tooling.Annotation[0];

    public com.sforce.soap.tooling.Annotation[] getAnnotations() {
      return annotations;
    }

    public void setAnnotations(com.sforce.soap.tooling.Annotation[] annotations) {
      this.annotations = annotations;
      annotations__is_set = true;
    }

    protected void setAnnotations(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("annotations", "urn:tooling.soap.sforce.com","annotations","urn:tooling.soap.sforce.com","Annotation",0,-1,true))) {
        setAnnotations((com.sforce.soap.tooling.Annotation[])__typeMapper.readObject(__in, _lookupTypeInfo("annotations", "urn:tooling.soap.sforce.com","annotations","urn:tooling.soap.sforce.com","Annotation",0,-1,true), com.sforce.soap.tooling.Annotation[].class));
      }
    }

    private void writeFieldAnnotations(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("annotations", "urn:tooling.soap.sforce.com","annotations","urn:tooling.soap.sforce.com","Annotation",0,-1,true), annotations, annotations__is_set);
    }

    /**
     * element : location of type {urn:tooling.soap.sforce.com}Position
     * java type: com.sforce.soap.tooling.Position
     */
    private boolean location__is_set = false;

    private com.sforce.soap.tooling.Position location;

    public com.sforce.soap.tooling.Position getLocation() {
      return location;
    }

    public void setLocation(com.sforce.soap.tooling.Position location) {
      this.location = location;
      location__is_set = true;
    }

    protected void setLocation(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("location", "urn:tooling.soap.sforce.com","location","urn:tooling.soap.sforce.com","Position",1,1,true))) {
        setLocation((com.sforce.soap.tooling.Position)__typeMapper.readObject(__in, _lookupTypeInfo("location", "urn:tooling.soap.sforce.com","location","urn:tooling.soap.sforce.com","Position",1,1,true), com.sforce.soap.tooling.Position.class));
      }
    }

    private void writeFieldLocation(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("location", "urn:tooling.soap.sforce.com","location","urn:tooling.soap.sforce.com","Position",1,1,true), location, location__is_set);
    }

    /**
     * element : modifiers of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String[]
     */
    private boolean modifiers__is_set = false;

    private java.lang.String[] modifiers = new java.lang.String[0];

    public java.lang.String[] getModifiers() {
      return modifiers;
    }

    public void setModifiers(java.lang.String[] modifiers) {
      this.modifiers = modifiers;
      modifiers__is_set = true;
    }

    protected void setModifiers(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("modifiers", "urn:tooling.soap.sforce.com","modifiers","http://www.w3.org/2001/XMLSchema","string",0,-1,true))) {
        setModifiers((java.lang.String[])__typeMapper.readObject(__in, _lookupTypeInfo("modifiers", "urn:tooling.soap.sforce.com","modifiers","http://www.w3.org/2001/XMLSchema","string",0,-1,true), java.lang.String[].class));
      }
    }

    private void writeFieldModifiers(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("modifiers", "urn:tooling.soap.sforce.com","modifiers","http://www.w3.org/2001/XMLSchema","string",0,-1,true), modifiers, modifiers__is_set);
    }

    /**
     * element : name of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean name__is_set = false;

    private java.lang.String name;

    public java.lang.String getName() {
      return name;
    }

    public void setName(java.lang.String name) {
      this.name = name;
      name__is_set = true;
    }

    protected void setName(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setName(__typeMapper.readString(__in, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldName(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("name", "urn:tooling.soap.sforce.com","name","http://www.w3.org/2001/XMLSchema","string",1,1,true), name, name__is_set);
    }

    /**
     * element : references of type {urn:tooling.soap.sforce.com}Position
     * java type: com.sforce.soap.tooling.Position[]
     */
    private boolean references__is_set = false;

    private com.sforce.soap.tooling.Position[] references = new com.sforce.soap.tooling.Position[0];

    public com.sforce.soap.tooling.Position[] getReferences() {
      return references;
    }

    public void setReferences(com.sforce.soap.tooling.Position[] references) {
      this.references = references;
      references__is_set = true;
    }

    protected void setReferences(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.isElement(__in, _lookupTypeInfo("references", "urn:tooling.soap.sforce.com","references","urn:tooling.soap.sforce.com","Position",0,-1,true))) {
        setReferences((com.sforce.soap.tooling.Position[])__typeMapper.readObject(__in, _lookupTypeInfo("references", "urn:tooling.soap.sforce.com","references","urn:tooling.soap.sforce.com","Position",0,-1,true), com.sforce.soap.tooling.Position[].class));
      }
    }

    private void writeFieldReferences(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("references", "urn:tooling.soap.sforce.com","references","urn:tooling.soap.sforce.com","Position",0,-1,true), references, references__is_set);
    }

    /**
     * element : type of type {http://www.w3.org/2001/XMLSchema}string
     * java type: java.lang.String
     */
    private boolean type__is_set = false;

    private java.lang.String type;

    public java.lang.String getType() {
      return type;
    }

    public void setType(java.lang.String type) {
      this.type = type;
      type__is_set = true;
    }

    protected void setType(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __in.peekTag();
      if (__typeMapper.verifyElement(__in, _lookupTypeInfo("type", "urn:tooling.soap.sforce.com","type","http://www.w3.org/2001/XMLSchema","string",1,1,true))) {
        setType(__typeMapper.readString(__in, _lookupTypeInfo("type", "urn:tooling.soap.sforce.com","type","http://www.w3.org/2001/XMLSchema","string",1,1,true), java.lang.String.class));
      }
    }

    private void writeFieldType(com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      __typeMapper.writeObject(__out, _lookupTypeInfo("type", "urn:tooling.soap.sforce.com","type","http://www.w3.org/2001/XMLSchema","string",1,1,true), type, type__is_set);
    }

    /**
     */
    @Override
    public void write(javax.xml.namespace.QName __element,
        com.sforce.ws.parser.XmlOutputStream __out, com.sforce.ws.bind.TypeMapper __typeMapper)
        throws java.io.IOException {
      __out.writeStartTag(__element.getNamespaceURI(), __element.getLocalPart());
      writeFields(__out, __typeMapper);
      __out.writeEndTag(__element.getNamespaceURI(), __element.getLocalPart());
    }

    protected void writeFields(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper)
         throws java.io.IOException {
       writeFields1(__out, __typeMapper);
    }

    @Override
    public void load(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      __typeMapper.consumeStartTag(__in);
      loadFields(__in, __typeMapper);
      __typeMapper.consumeEndTag(__in);
    }

    protected void loadFields(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
        loadFields1(__in, __typeMapper);
    }

    @Override
    public String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder();
      sb.append("[Symbol ");
      toString1(sb);

      sb.append("]\n");
      return sb.toString();
    }

    private void toStringHelper(StringBuilder sb, String name, Object value) {
      sb.append(' ').append(name).append("='").append(com.sforce.ws.util.Verbose.toString(value)).append("'\n");
    }

    private void writeFields1(com.sforce.ws.parser.XmlOutputStream __out,
         com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException {
      writeFieldAnnotations(__out, __typeMapper);
      writeFieldLocation(__out, __typeMapper);
      writeFieldModifiers(__out, __typeMapper);
      writeFieldName(__out, __typeMapper);
      writeFieldReferences(__out, __typeMapper);
      writeFieldType(__out, __typeMapper);
    }

    private void loadFields1(com.sforce.ws.parser.XmlInputStream __in,
        com.sforce.ws.bind.TypeMapper __typeMapper) throws java.io.IOException, com.sforce.ws.ConnectionException {
      setAnnotations(__in, __typeMapper);
      setLocation(__in, __typeMapper);
      setModifiers(__in, __typeMapper);
      setName(__in, __typeMapper);
      setReferences(__in, __typeMapper);
      setType(__in, __typeMapper);
    }

    private void toString1(StringBuilder sb) {
      toStringHelper(sb, "annotations", annotations);
      toStringHelper(sb, "location", location);
      toStringHelper(sb, "modifiers", modifiers);
      toStringHelper(sb, "name", name);
      toStringHelper(sb, "references", references);
      toStringHelper(sb, "type", type);
    }


}
